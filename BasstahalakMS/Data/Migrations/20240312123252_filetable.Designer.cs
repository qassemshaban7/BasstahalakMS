// <auto-generated />
using System;
using BasstahalakMS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BasstahalakMS.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240312123252_filetable")]
    partial class filetable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BasstahalakMS.Models.eFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EFiles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "ecc07b18-f55e-4f6b-95bd-0e84f556135f",
                            RoleId = "ba51b8f7-2a1d-45c6-9c00-68099eebd485"
                        },
                        new
                        {
                            UserId = "898d9efa-cd60-4446-b9ae-e0c48dd87c49",
                            RoleId = "2cdda855-1f15-4e11-9440-cfa84493cbd6"
                        },
                        new
                        {
                            UserId = "c2d7916d-74c1-4588-b2f2-6616b0e687f0",
                            RoleId = "4be32c82-c795-4db6-89ac-8cc33b11d012"
                        },
                        new
                        {
                            UserId = "325a3e6f-b33e-43d6-8cee-f6b0ad00f620",
                            RoleId = "f770a463-640a-43f6-b9f6-a1317fe2c214"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BasstahalakMS.Models.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<string>("ArabicRoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationRole");

                    b.HasData(
                        new
                        {
                            Id = "ba51b8f7-2a1d-45c6-9c00-68099eebd485",
                            ConcurrencyStamp = "ba51b8f7-2a1d-45c6-9c00-68099eebd485",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN",
                            ArabicRoleName = "المدير العام"
                        },
                        new
                        {
                            Id = "2cdda855-1f15-4e11-9440-cfa84493cbd6",
                            ConcurrencyStamp = "2cdda855-1f15-4e11-9440-cfa84493cbd6",
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            ArabicRoleName = "المدير"
                        },
                        new
                        {
                            Id = "4be32c82-c795-4db6-89ac-8cc33b11d012",
                            ConcurrencyStamp = "4be32c82-c795-4db6-89ac-8cc33b11d012",
                            Name = "Prepare",
                            NormalizedName = "PREPARE",
                            ArabicRoleName = "الاعداد"
                        },
                        new
                        {
                            Id = "f770a463-640a-43f6-b9f6-a1317fe2c214",
                            ConcurrencyStamp = "f770a463-640a-43f6-b9f6-a1317fe2c214",
                            Name = "Review",
                            NormalizedName = "REVIEW",
                            ArabicRoleName = "المراجعة"
                        });
                });

            modelBuilder.Entity("BasstahalakMS.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.HasData(
                        new
                        {
                            Id = "ecc07b18-f55e-4f6b-95bd-0e84f556135f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d996ebd-bd72-4693-b06c-f7ae59571630",
                            Email = "mohamedsalah@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MOHAMEDSALAH@GMAIL.COM",
                            NormalizedUserName = "MOHAMEDSALAH",
                            PasswordHash = "AQAAAAIAAYagAAAAEBxhrUiPzbAFJG/fDku2UMPpJqdj4C6AJ0FUc9KaALdNqLzXXuACywktHgo2NYNX3Q==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e0554e8c-48d8-4c93-8c3d-c9c0c6f88d4d",
                            TwoFactorEnabled = false,
                            UserName = "mohamedsalah",
                            FullName = "محمد صلاح"
                        },
                        new
                        {
                            Id = "898d9efa-cd60-4446-b9ae-e0c48dd87c49",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09a75c94-c92f-4fbf-8b96-ff03373fe003",
                            Email = "ehab@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EHAB@GMAIL.COM",
                            NormalizedUserName = "EHAB",
                            PasswordHash = "AQAAAAIAAYagAAAAEIQM+PD8dTUictiidowaaQwWEqgt7tCAkex1G1kONJbOZ1bKUu/784+GZc20W6IoOA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "14eb1e11-cfba-4b34-a0fe-825f63542801",
                            TwoFactorEnabled = false,
                            UserName = "ehab",
                            FullName = "ايهاب ابراهيم "
                        },
                        new
                        {
                            Id = "c2d7916d-74c1-4588-b2f2-6616b0e687f0",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3db12ebf-0e94-460e-8759-9c798b06881b",
                            Email = "shaban@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SHABAN@GMAIL.COM",
                            NormalizedUserName = "SHABAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDU+oSz8X8Rgb45xiybgtA4+vfMw1oVeDnygrKyd65xvTd4ws4IOWUFh/3hriKQnGw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42fde197-73bb-42ff-a778-dd733cab341b",
                            TwoFactorEnabled = false,
                            UserName = "shaban",
                            FullName = "شعبان ابراهيم"
                        },
                        new
                        {
                            Id = "325a3e6f-b33e-43d6-8cee-f6b0ad00f620",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "240f3b41-3871-412c-8a84-6ed154bd2b4c",
                            Email = "malek@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MALEK@GMAIL.COM",
                            NormalizedUserName = "MALEK",
                            PasswordHash = "AQAAAAIAAYagAAAAEGkPQxnnnw7QDStj0rKkflkdENizevHwdAlVUTRRIYomIntXTeKiFSiY40Sp14wUjQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "39786852-35fc-4f34-9e97-ba80ca8c5e1c",
                            TwoFactorEnabled = false,
                            UserName = "malek",
                            FullName = "مالك ايهاب"
                        });
                });

            modelBuilder.Entity("BasstahalakMS.Models.eFile", b =>
                {
                    b.HasOne("BasstahalakMS.Models.ApplicationUser", "User")
                        .WithMany("EFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BasstahalakMS.Models.ApplicationUser", b =>
                {
                    b.Navigation("EFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
